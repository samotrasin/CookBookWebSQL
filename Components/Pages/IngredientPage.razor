@page "/ingredients"
@rendermode InteractiveServer
@inject CookBookWebSQL.Service.IngredientService ingredientService
@inject IWebHostEnvironment Environment
@inject ILogger<IngredientPage> Logger
@inject IJSRuntime JS
@using Microsoft.EntityFrameworkCore
<h3>Ingredient</h3>


<table class="table table-striped">
    <thead>
        <tr>
            <th colspan="14" class="text-end">
                <div class="d-flex justify-content-between mb-2">

                    <!-- Search Section -->
                    <div class="d-flex align-items-center">

                        <input type="text" class="form-control" placeholder="Search..." @bind="searchTerm"
                        @bind:event="oninput" />
                        <i class="bi bi-search" style="margin-left: -40px;"></i>
                    </div>


                    <!-- Sort Section -->
                    <div class="d-flex gap-5">
                        <button type="button" class="btn btn-secondary" @onclick="SortById">
                            <i class="bi bi-sort-up"></i> Sort by ID
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="SortByName">
                            <i class="bi bi-sort-up"></i> Sort by Name
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="SortByDate">
                            <i class="bi bi-sort-up"></i> Sort by Date
                        </button>

                    </div>
                    <div>
                        <button type="button" class="btn btn-primary" @onclick="ShowAddModal">
                            <i class="bi bi-plus-circle"></i> Add Ingredient</button>

                    </div>
                </div>

            </th>
        </tr>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Nutrition</th>
            <th>Created Date</th>
            <th>Updated Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var ing in ingredients)
        {
            var index = ingredients.IndexOf(ing);
            <tr>
                <td>@ing.Id</td>
                <td>@ing.Name</td>
                <th>@ing.CategoryIngredient</th>
                <th>@ing.Nutrition</th>
                <td>@ing.CreatedDate</td>
                <td>@ing.UpdatedDate</td>
                <td>
                    <button type="button" class="btn btn-primary" @onclick="() => ShowInstructionsModal(ing)">
                        Descriptions</button>
                    <button type="button" class="btn btn-warning" @onclick="()=> OpenEditModal(ing)">Edit</button>
                    <button type="button" class="btn btn-danger"
                    @onclick="() => ConfirmDeleteIngredient(ing)">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ViewPictureModal(ing)">
                        Pictures</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Add modal *@
<div class="modal fade show" style="display: @getDisplay();" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Ingredient</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post">
                    <div class="form-group">
                        <label class="form-label">Ingredient </label>
                        <input @bind="ingredientName" class="form-control" @ref="controlName">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Category </label>
                        <input @bind="CategoryIngre" class="form-control" @ref="controlName">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Nutrition </label>
                        <input @bind="Nutrioninfo" class="form-control" @ref="controlName">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Descriptions</label>
                        <textarea @bind="ingredientDesc" class="form-control" rows="10"></textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Images</label>
                        <InputFile OnChange=LoadFiles class="form-control" multiple />
                        <br>
                        @foreach (var img in ingredientImages)
                        {
                            <b>@img.Path</b>
                            <br>
                        }
                        <dir class="row g-3">
                            @foreach (var img in ingredientImages)
                            {
                                <div class="card text-center">
                                    <img src="uploads/@img.Path" class="card-img" alt="@img.Path">
                                    <div class="card-img-overlay">
                                        <h5 class="card-body">@img.Path</h5>
                                    </div>
                                </div>
                            }
                        </dir>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="()=>isAddModalShowing=false">Close</button>
                <button type="button" class="btn btn-primary" @onclick="AddNewIngredient">Save New Ingredient</button>
            </div>
        </div>
    </div>
</div>

@* Edit modal *@
<div class="modal fade show" style="display: @getDisplayEdit();" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Current Ingredient</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post">
                    <div class="form-group">
                        <label class="form-label">Ingredient Name</label>
                        <input @bind="ingredientName" class="form-control" @ref="controlNameEdit">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <input @bind="ingredientName" class="form-control" @ref="controlNameEdit">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Nutrition</label>
                        <input @bind="ingredientName" class="form-control" @ref="controlNameEdit">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Descriptions</label>
                        <textarea @bind="ingredientDesc" class="form-control" rows="10"></textarea>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Images</label>
                        <InputFile OnChange=LoadFiles class="form-control" multiple />
                        <br>
                        @foreach (var img in ingredientImages)
                        {
                            <b>@img.Path</b>
                            <br>
                        }
                        <dir class="row g-3">
                            @foreach (var img in ingredientImages)
                            {
                                <div class="card text-center">
                                    <img src="uploads/@img.Path" class="card-img" alt="@img.Path">
                                    <div class="card-img-overlay">
                                        <h5 class="card-body">@img.Path</h5>
                                    </div>
                                </div>
                            }
                        </dir>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="()=>isEditModalShowing=false">Close</button>
                <button type="button" class="btn btn-primary" @onclick="EditIngredient">Save changes</button>
            </div>
        </div>
    </div>
</div>
@* Instruction Modal *@
<div class="modal fade show" style="display: @(isInstructionsModalShowing ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ingredient Descriptions</h5>
                <button type="button" class="btn-close" @onclick="HideInstructionsModal"></button>
            </div>
            <div class="modal-body">
                <textarea @bind="ingredientDesc" class="form-control" rows="10"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideInstructionsModal">Close</button>
            </div>
        </div>
    </div>
</div>


@* Picture Modal *@
<div class="modal fade show" style="display: @(isPictureModalShowing ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ingredient Images</h5>
                <button type="button" class="btn btn-close" @onclick="() => isPictureModalShowing = false"></button>
            </div>
            <div class="modal-body">
                <div class="card text-center">
                    @foreach (var im in currentIngredientImages)
                    {
                        <img src="/uploads/@im.Path" style="width: 100%;" />
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary"
                @onclick="() => isPictureModalShowing = false">Close</button>
            </div>
        </div>
    </div>
</div>

@code {

    List<Ingredient> ingredients = []; 
    List<Ingredient> filteredIngredient = [];

    List<IngredientImage> ingredientImages = new List<IngredientImage>();
    private List<IngredientImage> currentIngredientImages = new  List<IngredientImage>();
    private Ingredient currentIngredient = new();

    private string ingredientName = "";
    private string ingredientDesc= "";
    private string CategoryIngre = "";
    private string Nutrioninfo = "";
    private ElementReference controlName;
    bool isAddModalShowing = false;
    private ElementReference controlNameEdit;
    private bool isEditModalShowing = false;
    private bool isPictureModalShowing = false;
    private bool isInstructionsModalShowing = false;

    private string _searchTerm = "";
    
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                SearchIngredient();
            }
        }
    }
    private bool isAscending = true;
    private bool isNameAscending = true;
    private bool isDateAscending = true;
    private bool  isCategoryAscending = true;


    public void HideInstructionsModal()
    {
        isInstructionsModalShowing = false;
    }
    public void ShowInstructionsModal(Ingredient ingredient)
    {
        ingredientDesc = ingredient.Description;
        isInstructionsModalShowing = true;
    }
    string getDisplay()
    {
        return isAddModalShowing ? "block" : "none";
    }
    string getDisplayEdit()
    {
        return isEditModalShowing ? "block" : "none";
    }


    protected override async Task OnInitializedAsync()
    {
        ingredients = await ingredientService.GetIngredientsAsync();
        filteredIngredient = ingredients;
    }
 
    public void ShowAddModal()
    {
        currentIngredient = new Ingredient();
        ingredientName = "";
        isAddModalShowing = true;
    }

    public async Task AddNewIngredient()
    {

        currentIngredient.Name = ingredientName;
        currentIngredient.CategoryIngredient = CategoryIngre;
        currentIngredient.Nutrition = Nutrioninfo;
        currentIngredient.Description = ingredientDesc;
        currentIngredient.CreatedDate = DateTime.Now;
        currentIngredient.UpdatedDate = DateTime.Now;
        currentIngredient.Images = ingredientImages;
        await ingredientService.AddIngredient(currentIngredient);
        ingredients = await ingredientService.GetIngredientsAsync();
        ingredientImages = new List<IngredientImage>();
        isAddModalShowing = false;
        StateHasChanged();
    }

    public async Task EditIngredient()
    {
        if (currentIngredient != null)
        {
            currentIngredient!.Name = ingredientName;
            currentIngredient!.CategoryIngredient = CategoryIngre;
            currentIngredient!.Nutrition = Nutrioninfo;
            currentIngredient!.Description = ingredientDesc;
            currentIngredient!.UpdatedDate = DateTime.Now;
            currentIngredient!.Images = ingredientImages;
            await ingredientService.UpdateIngredient(currentIngredient);
            ingredients = await ingredientService.GetIngredientsAsync();
            ingredientImages = new List<IngredientImage>();
            isEditModalShowing = false;
            StateHasChanged();
        }
    }

    public void OpenEditModal(Ingredient ingredient)
    {
        currentIngredient = ingredient;
        ingredientName = ingredient.Name;
        isEditModalShowing = true;
    }

    public void ViewPictureModal(Ingredient ingredient)
    {
        currentIngredientImages = ingredient.Images;
        isPictureModalShowing = true;
    }
    public async Task ConfirmDeleteIngredient(Ingredient ingredient)
    {
        var res = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this ingredient?");
        if (res)
        {
            await ingredientService.DeleteIngredient(ingredient);
            ingredients = await ingredientService.GetIngredientsAsync();
            StateHasChanged();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            ingredientImages.Clear();
            foreach (var file in e.GetMultipleFiles())
            {
                var trustedFileName = file.Name;
                var path = Path.Combine(Environment.ContentRootPath, "wwwroot", "uploads", trustedFileName);
                await using FileStream fileStream = new(path, FileMode.Create);
                await file.OpenReadStream(1024 * 350).CopyToAsync(fileStream); // 350kb
                ingredientImages.Add(new() { Path = trustedFileName });
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private void SearchIngredient()
    {
        ingredients = ingredients
            .Where(ing => ing.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }



    private void SortById()
    {
        if (isAscending)
            ingredients = ingredients.OrderBy(i => i.Id).ToList();
        else
            ingredients = ingredients.OrderByDescending(i => i.Id).ToList();
        isAscending = !isAscending;
    }


    private void SortByName()
    {
        if (isNameAscending)
        {
            ingredients = ingredients.OrderBy(r => r.Name).ToList();
        }
        else
        {
            ingredients = ingredients.OrderByDescending(r => r.Name).ToList();
        }
        isNameAscending = !isNameAscending;
    }

    private void SortByDate()
    {
        if (isDateAscending)
        {
              ingredients =    ingredients.OrderBy(r => r.CreatedDate).ToList();
        }
        else
        {
            ingredients = ingredients.OrderByDescending(r => r.CreatedDate).ToList();
        }
        isDateAscending = !isDateAscending;
    }
    


    //note

    @* private void SortByCategory()
    {
        if ( isCategoryAscending)
        {
            filteredIngredient = filteredIngredient.OrderBy(r => r.CategoryIngredient).ToList();
        }
        else
        {
            filteredIngredient = filteredIngredient.OrderByDescending(r => r.CategoryIngredient).ToList();
        }
        isCategoryAscending = !isCategoryAscending;
    } *@



}

