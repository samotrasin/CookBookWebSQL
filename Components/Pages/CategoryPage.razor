@page "/categories"
@rendermode InteractiveServer
@inject CookBookWebSQL.Service.CategoryService categoryService
<h3>Category</h3>
<table class="table table-striped">
    <thead>
        <tr><th colspan="3" class="text-end">
            <button type="button" class="btn btn-success"
            @onclick="showAddModal">Create Category</button>
        </th></tr>
        <tr><th>ID</th><th>Name</th><th>Actions</th></tr>
    </thead>
    <tbody>
        @foreach (var cat in categories){
            <tr><td>@cat.Id</td>
            <td>@cat.Name</td>
            <td>
                <button type="button" class="btn btn-warning" @onclick="()=>showEditModal(cat)">Edit</button>
                <button type="button" class="btn btn-danger" @onclick="()=>showDeleteModal(cat)">Delete</button>
            </td>
            </tr>
        }
    </tbody>
</table>

@* Add modal *@
<div class="modal fade show" style="display:@modalAddDisplay" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">New Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=hideAddModal></button>
      </div>
        <EditForm Model=@currentCategory OnValidSubmit=AddNewCategory>
      <div class="modal-body">
        <div class="form-field">
            <label class="form-label">Category name:  </label>
            <input @bind="categoryName" class="form-control">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick=hideAddModal>Close</button>
        <button type="submit" class="btn btn-primary">Save changes</button>
      </div>
        </EditForm>
    </div>
  </div>
</div>

@* Edit modal *@
<div class="modal fade show" style="display:@modalEditDisplay" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=hideEditModal></button>
      </div>
        <EditForm Model=@currentCategory OnValidSubmit=EditCategory>
      <div class="modal-body">
        <div class="form-field">
            <label class="form-label">Category name:  </label>
            <input @bind="categoryName" class="form-control">
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick=hideEditModal>Close</button>
        <button type="submit" class="btn btn-primary">Save changes</button>
      </div>
        </EditForm>
    </div>
  </div>
</div>

@* Edit Modal *@
<div class="modal fade show" style="display:@modalDeleteDisplay" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Delete Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=hideDeleteModal></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this category?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick=hideDeleteModal>Close</button>
        <button type="button" class="btn btn-danger" @onclick=DeleteCategory>Delete</button>
      </div>
    </div>
  </div>
</div>


@code {
    List<Category> categories =[];
    private Category currentCategory = new Category();
    string modalAddDisplay = "none";
    string modalEditDisplay = "none";
    string modalDeleteDisplay = "none";
    string categoryName = "";
    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetCategoriesAsync();
    }
    void showAddModal(){
        modalAddDisplay = "block";
        }

    void hideAddModal(){
        modalAddDisplay = "none";
    }

    void showEditModal(Category category)
    {   
      currentCategory = category;
      categoryName = category.Name;
      modalEditDisplay = "block";
    }

    void hideEditModal(){
        modalEditDisplay = "none";
    }

    void showDeleteModal(Category category)
    {
        currentCategory = category;
        modalDeleteDisplay = "block";
    }
    
    void hideDeleteModal(){
        modalDeleteDisplay = "none";
    }

    public async Task AddNewCategory()
    {
        currentCategory.Name = categoryName;
        await categoryService.AddCategoryAsync(currentCategory);
        modalAddDisplay = "none";
        categories = await categoryService.GetCategoriesAsync();
        StateHasChanged();
    }

    public async Task EditCategory()
    {
        if(currentCategory != null)
        {
            currentCategory.Name = categoryName;
            await categoryService.UpdateCategoryAsync(currentCategory);
            hideEditModal();
            categories = await categoryService.GetCategoriesAsync();
            StateHasChanged();
        }
    }

    public async Task DeleteCategory()
    {
      if(currentCategory != null)
      {
        await categoryService.DeleteCategoryAsync(currentCategory);
        hideDeleteModal();
        categories = await categoryService.GetCategoriesAsync();
        StateHasChanged();
      }
    }
}
