@page "/recipes"
@rendermode InteractiveServer
@inject CookBookWebSQL.Service.RecipeService recipeService
@inject IWebHostEnvironment Environment
@inject ILogger<RecipePage> Logger
@inject IJSRuntime JS
<h3 class="mb-5">Recipe Page</h3>

<div class="d-flex justify-content-between mb-2">
    <!-- Search Section -->
    <div class="d-flex align-items-center">
        <input type="text" class="form-control me-2" placeholder="Search..." @bind="searchTerm" @bind:event="oninput" />
        <i class="bi bi-search" style="margin-left: -40px;"></i>
        @* <button type="button" class="d-flex gap-1 align-items-center btn btn-secondary btn-sm" @onclick="SearchRecipes">
            
        </button> *@
    </div>
    
    <!-- Sort Section -->
    <div>
        <button type="button" class="btn btn-secondary">
            <i class="bi bi-sort-up"></i> Sort by ID
        </button>
        <button type="button" class="btn btn-secondary">
            <i class="bi bi-sort-up"></i> Sort by Name
        </button>
        <button type="button" class="btn btn-secondary">
            <i class="bi bi-sort-up"></i> Sort by Date
        </button>
    </div>
    
    <!-- Add Recipe Button -->
    <div>
        <button type="button" class="btn btn-primary" @onclick="ShowAddModal">
            <i class="bi bi-plus-circle"></i> Add Recipe
        </button>
    </div>
</div>

<!-- Recipes Table -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Category</th>
            <th>Created Date</th>
            <th class="text-center">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var rec in filteredRecipes)
        {
            <tr>
                <td>@rec.Id</td>
                <td>@rec.Name</td>
                <td>@rec.CreatedDate</td>
                <td>@rec.UpdatedDate</td>
                <td class="text-center">
                    <button type="button" class="btn btn-primary" @onclick="() => ShowInstructionsModal(rec)">View Instructions</button>
                    <button type="button" class="btn btn-warning" @onclick="()=> OpenEditModal(rec)">Edit</button>
                    <button type="button" class="btn btn-danger" @onclick="() => ConfirmDeleteRecipe(rec)">Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => ViewPictureModal(rec)">View Pictures</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Add modal *@
<div class="modal fade show" style="display: @getDisplay();" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New Recipe</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form method="post">
            <div class="form-group">
                <label class="form-label">Recipe Name</label>
                <input @bind="recipeName" class="form-control" @ref="controlName">
            </div>
            <div class="form-group">
                <label class="form-label">Instructions</label>
                <textarea @bind="recipeInstructions" class="form-control" rows="10"></textarea>
            </div>
            <div class="form-group">
                <label class="form-label">Images</label>
                <InputFile OnChange=LoadFiles class="form-control" multiple />
                <br>
                @foreach (var img in recipeImages)
                {
                    <b>@img.Path</b>
                    <br>
                }
                <dir class="row g-3">
                    @foreach (var img in recipeImages)
                    {
                        <div class="card text-center">
                            <img src="uploads/@img.Path" class="card-img" alt="@img.Path">
                            <div class="card-img-overlay">
                                <h5 class="card-body">@img.Path</h5>
                            </div>
                        </div>
                    }
                </dir>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="()=>isAddModalShowing=false">Close</button>
        <button type="button" class="btn btn-primary" @onclick="AddNewRecipe">Save New Recipe</button>
      </div>
    </div>
  </div>
</div>

@* Edit modal *@
<div class="modal fade show" style="display: @getDisplayEdit();" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Current Recipe</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form method="post">
            <div class="form-group">
            <label class="form-label">Recipe Name</label>
            <input @bind="recipeName" class="form-control" @ref="controlNameEdit">
            </div>
            <div class="form-group">
                <label class="form-label">Instructions</label>
                <textarea @bind="recipeInstructions" class="form-control" rows="10"></textarea>
            </div>
            <div class="form-group">
                <label class="form-label">Images</label>
                <InputFile OnChange=LoadFiles class="form-control" multiple />
                <br>
                @foreach (var img in recipeImages)
                {
                    <b>@img.Path</b>
                    <br>
                }
                <dir class="row g-3">
                    @foreach (var img in recipeImages)
                    {
                        <div class="card text-center">
                            <img src="uploads/@img.Path" class="card-img" alt="@img.Path">
                            <div class="card-img-overlay">
                                <h5 class="card-body">@img.Path</h5>
                            </div>
                        </div>
                    }
                </dir>
            </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" @onclick="()=>isEditModalShowing=false">Close</button>
        <button type="button" class="btn btn-primary" @onclick="EditRecipe">Save changes</button>
      </div>
    </div>
  </div>
</div>

@* Instruction Modal *@
<div class="modal fade show" style="display: @(isInstructionsModalShowing ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Recipe Instructions</h5>
                <button type="button" class="btn-close" @onclick="HideInstructionsModal"></button>
            </div>
            <div class="modal-body">
                <textarea @bind="recipeInstructions" class="form-control" rows="10"></textarea>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" @onclick="HideInstructionsModal">Close</button>
        </div>
        </div>
    </div>
</div>

@* Picture Modal *@
<div class="modal fade show" style="display: @(isPictureModalShowing ? "block" : "none")" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Recipe Images</h5>
                <button type="button" class="btn-close" @onclick="() => isPictureModalShowing = false"></button>
            </div>
            <div class="modal-body">
                <div class="card text-center">
                    @foreach (var im in currentRecipeImages)
                    {
                        <img src="/uploads/@im.Path" style="width: 80px;" class="rounded-circle text-bg-light border border-5 p-2"/>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => isPictureModalShowing = false">Close</button>
            </div>
        </div>
    </div>
</div>

@code{
    List<Recipe> recipes = [];
    List<Recipe> filteredRecipes = [];
    List<RecipeImage> recipeImages = new List<RecipeImage>();
    private List<RecipeImage> currentRecipeImages = new List<RecipeImage>();
    private Recipe currentRecipe = new();
    private string recipeName="";
    private string recipeInstructions="";
    private ElementReference controlName;
    bool isAddModalShowing = false;
    private ElementReference controlNameEdit;
    private bool isEditModalShowing = false;
    private bool isInstructionsModalShowing = false;
    private bool isPictureModalShowing = false;
    private string modalTitle = "";
    private int selectedCategoryId;
    private string _searchTerm = "";
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                SearchRecipes();
            }
        }
    }

    string getDisplay(){
        return isAddModalShowing ? "block" : "none";
    }
    string getDisplayEdit(){
        return isEditModalShowing ? "block" : "none";
    }

    protected override async Task OnInitializedAsync()
    {
        recipes = await recipeService.GetRecipesAsync();
        filteredRecipes = recipes;
    }

    private void SearchRecipes()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRecipes = recipes;
        }
        else
        {
            filteredRecipes = recipes.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    public void ShowAddModal(){
        currentRecipe = new Recipe();
        recipeName = "";
        recipeInstructions = "";
        modalTitle = "Add New Recipe";
        isAddModalShowing = true;
    }

    public async Task AddNewRecipe()
    {
        try
        {
            // Populate the currentRecipe object with the necessary data
            currentRecipe.Name = recipeName;
            currentRecipe.Instructions = recipeInstructions;
            currentRecipe.CreatedDate = DateTime.Now;
            currentRecipe.UpdatedDate = DateTime.Now;
            currentRecipe.Images = recipeImages;

            // Call the AddRecipe method to save the recipe to the database
            await recipeService.AddRecipe(currentRecipe);

            // Refresh the recipes list
            recipes = await recipeService.GetRecipesAsync();
            filteredRecipes = recipes;

            // Clear the recipeImages list and hide the add modal
            recipeImages = new List<RecipeImage>();
            isAddModalShowing = false;

            // Notify the UI to update
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Log the exception
            Logger.LogError(ex, "Error adding new recipe");
        }
    }

    public async Task EditRecipe(){
        if(currentRecipe != null){
            currentRecipe!.Name = recipeName;
            currentRecipe!.Instructions = recipeInstructions;
            currentRecipe!.UpdatedDate = DateTime.Now;
            currentRecipe!.Images = recipeImages;
            await recipeService.UpdateRecipe(currentRecipe);
            recipes = await recipeService.GetRecipesAsync();
            filteredRecipes = recipes;
            recipeImages = new List<RecipeImage>();
            isEditModalShowing = false;
            StateHasChanged();
        }
    }

    public void OpenEditModal(Recipe recipe){
        currentRecipe = recipe;
        recipeName = recipe.Name;
        recipeInstructions = recipe.Instructions;
        modalTitle = "Edit Recipe";
        isEditModalShowing = true;
    }

    public void ShowInstructionsModal(Recipe recipe){
        recipeInstructions = recipe.Instructions;
        isInstructionsModalShowing = true;
    }

    public void HideInstructionsModal(){
        isInstructionsModalShowing = false;
    }

    public void ViewPictureModal(Recipe recipe)
    {
        currentRecipeImages = recipe.Images;
        isPictureModalShowing = true;
    }    
    public async Task ConfirmDeleteRecipe(Recipe recipe)
    {
        var res = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this recipe?");
        if(res)
        {
            await recipeService.DeleteRecipe(recipe);
            recipes = await recipeService.GetRecipesAsync();
            filteredRecipes = recipes;
            StateHasChanged();
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            recipeImages.Clear();
            foreach (var file in e.GetMultipleFiles())
            {
                var trustedFileName = file.Name;
                var path = Path.Combine(Environment.ContentRootPath, "wwwroot", "uploads", trustedFileName);
                await using FileStream fileStream = new(path, FileMode.Create);
                await file.OpenReadStream(1024*350).CopyToAsync(fileStream); // 350kb
                recipeImages.Add(new() { Path = trustedFileName });
            }
        }
        catch (Exception)
        {
            return;
        }
    }
}