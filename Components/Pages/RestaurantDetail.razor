<<<<<<< HEAD
@page "/restaurantDetail"
@rendermode InteractiveServer
@inject RestaurantManagementWebSQL.Service.RestaurantService restaurantService
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS

<h3 class="mb-5">Restaurant Detail</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<div class="d-flex justify-content-between mb-2">
    <!-- Search Section -->
    <div class="d-flex align-items-center w-25">
        <input type="text" class="form-control form-control-sm" placeholder="Search..." @bind="searchTerm" @bind:event="oninput" />
        <i class="bi bi-search" style="margin-left: -30px;"></i>
    </div>

    <!-- Add Restaurant Button -->
    <div>
        <button type="button" class="btn btn-success btn-sm" @onclick="ShowAddModal">
            <i class="bi bi-plus-circle"></i> Add Restaurant
        </button>
    </div>
</div>

<!-- Restaurants Table -->
<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Address</th>
            <th>Latitude</th>
            <th>Longitude</th>
            <th>Google Map</th>
            <th>Description</th>
            <th class="text-center">Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var restaurant in filteredRestaurants)
        {
            <tr>
                <td>@restaurant.Id</td>
                <td>@restaurant.Name</td>
                <td>@restaurant.Address</td>
                <td>@restaurant.Latitude</td>
                <td>@restaurant.Longitude</td>
                <td><a href="@restaurant.GoogleMap" target="_blank">View Map</a></td>
                <td>@restaurant.Description</td>
                <td class="text-center">
                    <button type="button" class="btn btn-warning btn-sm" @onclick="() => OpenEditModal(restaurant)">Edit</button>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="() => ConfirmDeleteRestaurant(restaurant)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@* Add/Edit Modal *@
<div class="modal fade show" style="display: @getModalDisplay();" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@modalTitle</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label class="form-label">Restaurant Name</label>
                        <input @bind="restaurantName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Address</label>
                        <input @bind="restaurantAddress" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Latitude</label>
                        <input type="number" step="any" @bind="restaurantLatitude" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Longitude</label>
                        <input type="number" step="any" @bind="restaurantLongitude" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Google Map</label>
                        <input @bind="restaurantGoogleMap" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea @bind="restaurantDescription" class="form-control"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="SaveRestaurant">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    List<Restaurant> restaurants = new();
    List<Restaurant> filteredRestaurants = new();
    private Restaurant currentRestaurant = new();
    private string restaurantName = "";
    private string restaurantAddress = "";
    private double restaurantLatitude;
    private double restaurantLongitude;
    private string restaurantGoogleMap = "";
    private string restaurantDescription = "";
    private string errorMessage = "";
    private string _searchTerm = "";
    private string modalTitle = "";
    private bool isModalVisible = false;

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                SearchRestaurants();
            }
        }
    }

    string getModalDisplay() => isModalVisible ? "block" : "none";

    protected override async Task OnInitializedAsync()
    {
        restaurants = await restaurantService.GetRestaurantsAsync();
        filteredRestaurants = restaurants;
    }

    private void SearchRestaurants()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRestaurants = restaurants;
        }
        else
        {
            filteredRestaurants = restaurants.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    public void ShowAddModal()
    {
        currentRestaurant = new Restaurant();
        restaurantName = "";
        restaurantAddress = "";
        restaurantLatitude = 0;
        restaurantLongitude = 0;
        restaurantGoogleMap = "";
        restaurantDescription = "";
        modalTitle = "Add New Restaurant";
        isModalVisible = true;
    }

    public void OpenEditModal(Restaurant restaurant)
    {
        currentRestaurant = restaurant;
        restaurantName = restaurant.Name;
        restaurantAddress = restaurant.Address;
        restaurantLatitude = restaurant.Latitude;
        restaurantLongitude = restaurant.Longitude;
        restaurantGoogleMap = restaurant.GoogleMap;
        restaurantDescription = restaurant.Description;
        modalTitle = "Edit Restaurant";
        isModalVisible = true;
    }

    public async Task SaveRestaurant()
    {
        try
        {
            currentRestaurant.Name = restaurantName;
            currentRestaurant.Address = restaurantAddress;
            currentRestaurant.Latitude = restaurantLatitude;
            currentRestaurant.Longitude = restaurantLongitude;
            currentRestaurant.GoogleMap = restaurantGoogleMap;
            currentRestaurant.Description = restaurantDescription;

            if (currentRestaurant.Id == 0)
            {
                await restaurantService.AddRestaurant(currentRestaurant);
            }
            else
            {
                await restaurantService.UpdateRestaurant(currentRestaurant);
            }

            restaurants = await restaurantService.GetRestaurantsAsync();
            filteredRestaurants = restaurants;
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving restaurant: {ex.Message}";
        }
    }

    public async Task ConfirmDeleteRestaurant(Restaurant restaurant)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this restaurant?");
        if (confirm)
        {
            await restaurantService.DeleteRestaurant(restaurant);
            restaurants = await restaurantService.GetRestaurantsAsync();
            filteredRestaurants = restaurants;
        }
    }

    public void CloseModal()
    {
        isModalVisible = false;
    }
}
=======
@* @page "/restaurant-detail"
@using CookBookWebSQL.Models
@inject CookBookWebSQL.Service.RestaurantService restaurantService
<h3>Restaurant Details</h3>
<div class="row">

    @if (restaurantsObj.Count > 0)
    {
        foreach (var item in restaurantsObj)
        {

            <div class="col-auto mt-3">
                <a href="readrestaurant/@item.Id" style="text-decoration:none;">
                    <div class="card">
                        <div class="card-header fw-bold h6 text-light" style="text-align: center; background-color: rgb(30, 95, 200);">@item.Name</div>
                        <div class="card-body">
                            <img class="card-img-top" src="@item.Images" width="200" height="200" />
                        </div>
                        <div class="card-footer">
                            <ul class="list-group list-group-horizontal-sm text-center" style="list-style:none;">
                                <li class="list-group-item-action"><i class="oi oi-thumb-up"></i></li>
                                <li class="list-group-item-action"><i class="oi oi-share-boxed text-primary"></i></li>
                                <li class="list-group-item-action"><i class="oi oi-arrow-circle-bottom"></i></li>
                            </ul>
                        </div>
                    </div>
                </a>
            </div>

        }
    }


</div>
@code{
    
    private List<CookBookWebSQL.Models.Restaurant> restaurantsObj { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        restaurantsObj = await restaurantService.GetRestaurantAsync();
    }

} *@
@page "/restaurant-detail"
@using CookBookWebSQL.Models
@inject CookBookWebSQL.Service.RestaurantService restaurantService

<h3>Restaurant Details</h3>
<div class="row">
    @if (restaurantsObj.Count > 0)
    {
        foreach (var item in restaurantsObj)
        {
            <div class="col-auto mt-3">
                <a href="readrestaurant/@item.Id" style="text-decoration:none;">
                    <div class="card">
                        <div class="card-header fw-bold h6 text-light" style="text-align:left; background-color: rgb(0, 42, 81); ">@item.Name</div>
                        <div class="card-body">
                            @if (item.Images != null && item.Images.Count > 0)
                            {
                                @foreach (var image in item.Images)
                                {
                                    <img class="card-img-top" src="/uploads/@image.ImagePath" width="200" height="200" alt="@item.Name" />
                                }
                            }
                            else
                            {
                                <p>No images available</p>
                            }
                        </div>
                    </div>
                </a>
            </div>
        }
    }
    else
    {
        <p>No restaurants available.</p>
    }
</div>

@code {
    private List<CookBookWebSQL.Models.Restaurant> restaurantsObj { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        restaurantsObj = await restaurantService.GetRestaurantAsync();
    }
}
>>>>>>> d9e1c92 (Update)
